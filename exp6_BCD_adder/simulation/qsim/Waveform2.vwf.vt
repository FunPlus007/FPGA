// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/21/2023 09:25:18"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          BCDadder_top
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module BCDadder_top_vlg_vec_tst();
// constants                                           
// general purpose registers
reg [11:0] A;
reg [11:0] B;
reg Cin;
// wires                                               
wire Cout;
wire [11:0] Sum;

// assign statements (if any)                          
BCDadder_top i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.Cin(Cin),
	.Cout(Cout),
	.Sum(Sum)
);
initial 
begin 
#1000000 $finish;
end 

// A[11]
initial
begin
	A[11] = 1'b0;
	A[11] = #640000 1'b1;
end 

// A[10]
initial
begin
	A[10] = 1'b0;
	A[10] = #320000 1'b1;
	A[10] = #320000 1'b0;
	A[10] = #320000 1'b1;
end 

// A[9]
initial
begin
	repeat(3)
	begin
		A[9] = 1'b0;
		A[9] = #160000 1'b1;
		# 160000;
	end
	A[9] = 1'b0;
end 

// A[8]
initial
begin
	repeat(6)
	begin
		A[8] = 1'b0;
		A[8] = #80000 1'b1;
		# 80000;
	end
	A[8] = 1'b0;
end 

// A[7]
initial
begin
	A[7] = 1'b0;
	A[7] = #320000 1'b1;
	A[7] = #320000 1'b0;
	A[7] = #320000 1'b1;
end 

// A[6]
initial
begin
	repeat(3)
	begin
		A[6] = 1'b0;
		A[6] = #160000 1'b1;
		# 160000;
	end
	A[6] = 1'b0;
end 

// A[5]
initial
begin
	repeat(6)
	begin
		A[5] = 1'b0;
		A[5] = #80000 1'b1;
		# 80000;
	end
	A[5] = 1'b0;
end 

// A[4]
initial
begin
	repeat(12)
	begin
		A[4] = 1'b0;
		A[4] = #40000 1'b1;
		# 40000;
	end
	A[4] = 1'b0;
end 

// A[3]
initial
begin
	repeat(6)
	begin
		A[3] = 1'b0;
		A[3] = #80000 1'b1;
		# 80000;
	end
	A[3] = 1'b0;
end 

// A[2]
initial
begin
	repeat(12)
	begin
		A[2] = 1'b0;
		A[2] = #40000 1'b1;
		# 40000;
	end
	A[2] = 1'b0;
end 

// A[1]
always
begin
	A[1] = 1'b0;
	A[1] = #20000 1'b1;
	#20000;
end 

// A[0]
always
begin
	A[0] = 1'b0;
	A[0] = #10000 1'b1;
	#10000;
end 

// B[11]
initial
begin
	B[11] = 1'b0;
	B[11] = #640000 1'b1;
end 

// B[10]
initial
begin
	B[10] = 1'b0;
	B[10] = #320000 1'b1;
	B[10] = #320000 1'b0;
	B[10] = #320000 1'b1;
end 

// B[9]
initial
begin
	repeat(3)
	begin
		B[9] = 1'b0;
		B[9] = #160000 1'b1;
		# 160000;
	end
	B[9] = 1'b0;
end 

// B[8]
initial
begin
	repeat(6)
	begin
		B[8] = 1'b0;
		B[8] = #80000 1'b1;
		# 80000;
	end
	B[8] = 1'b0;
end 

// B[7]
initial
begin
	B[7] = 1'b0;
	B[7] = #320000 1'b1;
	B[7] = #320000 1'b0;
	B[7] = #320000 1'b1;
end 

// B[6]
initial
begin
	repeat(3)
	begin
		B[6] = 1'b0;
		B[6] = #160000 1'b1;
		# 160000;
	end
	B[6] = 1'b0;
end 

// B[5]
initial
begin
	repeat(6)
	begin
		B[5] = 1'b0;
		B[5] = #80000 1'b1;
		# 80000;
	end
	B[5] = 1'b0;
end 

// B[4]
initial
begin
	repeat(12)
	begin
		B[4] = 1'b0;
		B[4] = #40000 1'b1;
		# 40000;
	end
	B[4] = 1'b0;
end 

// B[3]
initial
begin
	repeat(6)
	begin
		B[3] = 1'b0;
		B[3] = #80000 1'b1;
		# 80000;
	end
	B[3] = 1'b0;
end 

// B[2]
initial
begin
	repeat(12)
	begin
		B[2] = 1'b0;
		B[2] = #40000 1'b1;
		# 40000;
	end
	B[2] = 1'b0;
end 

// B[1]
always
begin
	B[1] = 1'b0;
	B[1] = #20000 1'b1;
	#20000;
end 

// B[0]
always
begin
	B[0] = 1'b0;
	B[0] = #10000 1'b1;
	#10000;
end 

// Cin
initial
begin
	Cin = 1'b0;
end 
endmodule


// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "10/14/2023 15:01:10"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          MUX81
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module MUX81_vlg_vec_tst();
// constants                                           
// general purpose registers
reg A;
reg B;
reg C;
reg Q0;
reg Q1;
reg Q2;
reg Q3;
reg Q4;
reg Q5;
reg Q6;
reg Q7;
// wires                                               
wire Y;

// assign statements (if any)                          
MUX81 i1 (
// port map - connection between master ports and signals/registers   
	.A(A),
	.B(B),
	.C(C),
	.Q0(Q0),
	.Q1(Q1),
	.Q2(Q2),
	.Q3(Q3),
	.Q4(Q4),
	.Q5(Q5),
	.Q6(Q6),
	.Q7(Q7),
	.Y(Y)
);
initial 
begin 
#1000000 $finish;
end 

// A
initial
begin
	repeat(6)
	begin
		A = 1'b0;
		A = #80000 1'b1;
		# 80000;
	end
	A = 1'b0;
end 

// B
initial
begin
	repeat(12)
	begin
		B = 1'b0;
		B = #40000 1'b1;
		# 40000;
	end
	B = 1'b0;
end 

// C
always
begin
	C = 1'b0;
	C = #20000 1'b1;
	#20000;
end 

// Q0
always
begin
	Q0 = 1'b0;
	Q0 = #5000 1'b1;
	#5000;
end 

// Q1
always
begin
	Q1 = 1'b0;
	Q1 = #10000 1'b1;
	#10000;
end 

// Q2
initial
begin
	repeat(33)
	begin
		Q2 = 1'b0;
		Q2 = #15000 1'b1;
		# 15000;
	end
	Q2 = 1'b0;
end 

// Q3
always
begin
	Q3 = 1'b0;
	Q3 = #20000 1'b1;
	#20000;
end 

// Q4
always
begin
	Q4 = 1'b0;
	Q4 = #25000 1'b1;
	#25000;
end 

// Q5
initial
begin
	repeat(16)
	begin
		Q5 = 1'b0;
		Q5 = #30000 1'b1;
		# 30000;
	end
	Q5 = 1'b0;
	Q5 = #30000 1'b1;
end 

// Q6
initial
begin
	repeat(14)
	begin
		Q6 = 1'b0;
		Q6 = #35000 1'b1;
		# 35000;
	end
	Q6 = 1'b0;
end 

// Q7
initial
begin
	repeat(12)
	begin
		Q7 = 1'b0;
		Q7 = #40000 1'b1;
		# 40000;
	end
	Q7 = 1'b0;
end 
endmodule


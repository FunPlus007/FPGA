// Copyright (C) 2018  Intel Corporation. All rights reserved.
// Your use of Intel Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Intel Program License 
// Subscription Agreement, the Intel Quartus Prime License Agreement,
// the Intel FPGA IP License Agreement, or other applicable license
// agreement, including, without limitation, that your use is for
// the sole purpose of programming logic devices manufactured by
// Intel and sold by Intel or its authorized distributors.  Please
// refer to the applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "09/14/2023 21:30:05"
                                                                                
// Verilog Test Bench (with test vectors) for design :                          exp1
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module exp1_vlg_vec_tst();
// constants                                           
// general purpose registers
reg pin_A;
reg pin_B;
reg pin_C;
// wires                                               
wire pin_Y0;
wire pin_Y1;
wire pin_Y2;
wire pin_Y3;
wire pin_Y4;
wire pin_Y5;
wire pin_Y6;
wire pin_Y7;

// assign statements (if any)                          
exp1 i1 (
// port map - connection between master ports and signals/registers   
	.pin_A(pin_A),
	.pin_B(pin_B),
	.pin_C(pin_C),
	.pin_Y0(pin_Y0),
	.pin_Y1(pin_Y1),
	.pin_Y2(pin_Y2),
	.pin_Y3(pin_Y3),
	.pin_Y4(pin_Y4),
	.pin_Y5(pin_Y5),
	.pin_Y6(pin_Y6),
	.pin_Y7(pin_Y7)
);
initial 
begin 
#1000000 $finish;
end 

// pin_A
initial
begin
	pin_A = 1'b0;
end 

// pin_B
initial
begin
	pin_B = 1'b0;
end 

// pin_C
initial
begin
	pin_C = 1'b0;
end 
endmodule

